module Util
  
  class << self
  
    # Returns a new hash with the contents duplicated from the params hash provided.
    # Note: this should not be used as a guaranteed deep copy mechanism, rather it is especially for
    # the params hash generated by ActionController.
    def duplicate_params(params)
      return Marshal.load(Marshal.dump(params))
    end
    
    # This method removes the special Rails parameters from a params hash provided.   
    #
    # NOTE: the provided params collection will not be affected. 
    # Instead, a new hash will be returned. 
    def remove_rails_special_params_from(params, additional_to_remove=[])
      return { } if params.blank?
      
      special_params = %w( id format controller action commit ).concat(additional_to_remove)
      return params.reject { |k,v| special_params.include?(k.to_s.downcase) }
    end
    
    # FIXME: remove the logging helpers below and use a better 
    # tool for logging (esp for logging exceptions)!
    
    # For info/debug messages
    def say(msg)
      puts "INFO: #{msg}"
      Rails.logger.info msg
    end
    
    # For warning messages
    def warn(msg)
      puts "WARNING: #{msg}"
      Rails.logger.warn msg
    end
    
    # For error messages
    def yell(msg)
      puts "ERROR: #{msg}"
      Rails.logger.error msg
    end
    
    # type should be either:
    #   :error
    #   :warning
    #   :info
    def log_exception(ex, type, initial_msg="An exception occurred!")
      msg = initial_msg + "\n\tException type: #{ex.class.name}. \n\tException message: #{ex.message}. \n\t#{ex.backtrace.join("\n")}"
      case type
        when :error
          Util.yell(msg)
        when :warning
          Util.warn(msg)
        else
          Util.say(msg)
      end
    end
  
  end
  
end
